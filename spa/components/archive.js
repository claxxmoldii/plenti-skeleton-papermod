/* generated by Svelte v3.32.3 */
import {
	SvelteComponent,
	append,
	children,
	claim_element,
	claim_text,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	text
} from '/spa/web_modules/svelte/internal/index.mjs';

function create_fragment(ctx) {
	let main;
	let h4;
	let t;

	return {
		c() {
			main = element("main");
			h4 = element("h4");
			t = text("yeah! archive yo!");
		},
		l(nodes) {
			main = claim_element(nodes, "MAIN", {});
			var main_nodes = children(main);
			h4 = claim_element(main_nodes, "H4", {});
			var h4_nodes = children(h4);
			t = claim_text(h4_nodes, "yeah! archive yo!");
			h4_nodes.forEach(detach);
			main_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert(target, main, anchor);
			append(main, h4);
			append(h4, t);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(main);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { allContent } = $$props;

	$$self.$$set = $$props => {
		if ("allContent" in $$props) $$invalidate(0, allContent = $$props.allContent);
	};

	return [allContent];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { allContent: 0 });
	}
}

export default Component;