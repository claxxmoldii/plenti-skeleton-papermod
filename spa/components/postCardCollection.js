/* generated by Svelte v3.32.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	destroy_each,
	detach,
	element,
	empty,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from '/spa/web_modules/svelte/internal/index.mjs';

import { sortByDate } from '/spa/components/../scripts/sort_by_date.js';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	child_ctx[5] = i;
	return child_ctx;
}

// (9:4) {#if i >= postRangeLow && i < postRangeHigh}
function create_if_block(ctx) {
	let article;
	let a;
	let header;
	let h2;
	let t0_value = /*item*/ ctx[3].fields.title + "";
	let t0;
	let t1;
	let section;
	let p;
	let t2_value = /*item*/ ctx[3].fields.teaser + "";
	let t2;
	let t3;
	let footer;
	let span;
	let t4_value = /*item*/ ctx[3].fields.date + "";
	let t4;
	let t5;
	let t6_value = /*item*/ ctx[3].fields.readTime + "";
	let t6;
	let t7;
	let t8_value = /*item*/ ctx[3].fields.author + "";
	let t8;
	let a_href_value;
	let t9;

	return {
		c() {
			article = element("article");
			a = element("a");
			header = element("header");
			h2 = element("h2");
			t0 = text(t0_value);
			t1 = space();
			section = element("section");
			p = element("p");
			t2 = text(t2_value);
			t3 = space();
			footer = element("footer");
			span = element("span");
			t4 = text(t4_value);
			t5 = text(" · ");
			t6 = text(t6_value);
			t7 = text(" · ");
			t8 = text(t8_value);
			t9 = space();
			this.h();
		},
		l(nodes) {
			article = claim_element(nodes, "ARTICLE", { class: true });
			var article_nodes = children(article);
			a = claim_element(article_nodes, "A", { class: true, href: true });
			var a_nodes = children(a);
			header = claim_element(a_nodes, "HEADER", { class: true });
			var header_nodes = children(header);
			h2 = claim_element(header_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, t0_value);
			h2_nodes.forEach(detach);
			header_nodes.forEach(detach);
			t1 = claim_space(a_nodes);
			section = claim_element(a_nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			p = claim_element(section_nodes, "P", { class: true });
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, t2_value);
			p_nodes.forEach(detach);
			section_nodes.forEach(detach);
			t3 = claim_space(a_nodes);
			footer = claim_element(a_nodes, "FOOTER", { class: true });
			var footer_nodes = children(footer);
			span = claim_element(footer_nodes, "SPAN", {});
			var span_nodes = children(span);
			t4 = claim_text(span_nodes, t4_value);
			t5 = claim_text(span_nodes, " · ");
			t6 = claim_text(span_nodes, t6_value);
			t7 = claim_text(span_nodes, " · ");
			t8 = claim_text(span_nodes, t8_value);
			span_nodes.forEach(detach);
			footer_nodes.forEach(detach);
			a_nodes.forEach(detach);
			t9 = claim_space(article_nodes);
			article_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(h2, "class", "svelte-ovujrj");
			attr(header, "class", "entry-header");
			attr(p, "class", "svelte-ovujrj");
			attr(section, "class", "entry-content");
			attr(footer, "class", "byLine svelte-ovujrj");
			attr(a, "class", "isLinkTextDecorationNone svelte-ovujrj");
			attr(a, "href", a_href_value = /*item*/ ctx[3].path);
			attr(article, "class", "post-entry svelte-ovujrj");
		},
		m(target, anchor) {
			insert(target, article, anchor);
			append(article, a);
			append(a, header);
			append(header, h2);
			append(h2, t0);
			append(a, t1);
			append(a, section);
			append(section, p);
			append(p, t2);
			append(a, t3);
			append(a, footer);
			append(footer, span);
			append(span, t4);
			append(span, t5);
			append(span, t6);
			append(span, t7);
			append(span, t8);
			append(article, t9);
		},
		p(ctx, dirty) {
			if (dirty & /*items*/ 1 && t0_value !== (t0_value = /*item*/ ctx[3].fields.title + "")) set_data(t0, t0_value);
			if (dirty & /*items*/ 1 && t2_value !== (t2_value = /*item*/ ctx[3].fields.teaser + "")) set_data(t2, t2_value);
			if (dirty & /*items*/ 1 && t4_value !== (t4_value = /*item*/ ctx[3].fields.date + "")) set_data(t4, t4_value);
			if (dirty & /*items*/ 1 && t6_value !== (t6_value = /*item*/ ctx[3].fields.readTime + "")) set_data(t6, t6_value);
			if (dirty & /*items*/ 1 && t8_value !== (t8_value = /*item*/ ctx[3].fields.author + "")) set_data(t8, t8_value);

			if (dirty & /*items*/ 1 && a_href_value !== (a_href_value = /*item*/ ctx[3].path)) {
				attr(a, "href", a_href_value);
			}
		},
		d(detaching) {
			if (detaching) detach(article);
		}
	};
}

// (8:2) {#each sortByDate(items) as item, i}
function create_each_block(ctx) {
	let if_block_anchor;
	let if_block = /*i*/ ctx[5] >= /*postRangeLow*/ ctx[1] && /*i*/ ctx[5] < /*postRangeHigh*/ ctx[2] && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*i*/ ctx[5] >= /*postRangeLow*/ ctx[1] && /*i*/ ctx[5] < /*postRangeHigh*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let each_value = sortByDate(/*items*/ ctx[0]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "grid svelte-ovujrj");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*sortByDate, items, postRangeLow, postRangeHigh*/ 7) {
				each_value = sortByDate(/*items*/ ctx[0]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { items } = $$props, { postRangeLow } = $$props, { postRangeHigh } = $$props;

	$$self.$$set = $$props => {
		if ("items" in $$props) $$invalidate(0, items = $$props.items);
		if ("postRangeLow" in $$props) $$invalidate(1, postRangeLow = $$props.postRangeLow);
		if ("postRangeHigh" in $$props) $$invalidate(2, postRangeHigh = $$props.postRangeHigh);
	};

	return [items, postRangeLow, postRangeHigh];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			items: 0,
			postRangeLow: 1,
			postRangeHigh: 2
		});
	}
}

export default Component;