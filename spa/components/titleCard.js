/* generated by Svelte v3.32.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	space,
	text
} from '/spa/web_modules/svelte/internal/index.mjs';

import { sortByDate } from '/spa/components/../scripts/sort_by_date.js';

function create_fragment(ctx) {
	let div;
	let header;
	let h4;
	let t0;
	let t1;
	let footer;
	let span;
	let t2;
	let t3;
	let t4;
	let t5;
	let t6;

	return {
		c() {
			div = element("div");
			header = element("header");
			h4 = element("h4");
			t0 = text(title);
			t1 = space();
			footer = element("footer");
			span = element("span");
			t2 = text(date);
			t3 = text(" · ");
			t4 = text(readTime);
			t5 = text(" · ");
			t6 = text(author);
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			header = claim_element(div_nodes, "HEADER", { class: true });
			var header_nodes = children(header);
			h4 = claim_element(header_nodes, "H4", {});
			var h4_nodes = children(h4);
			t0 = claim_text(h4_nodes, title);
			h4_nodes.forEach(detach);
			header_nodes.forEach(detach);
			t1 = claim_space(div_nodes);
			footer = claim_element(div_nodes, "FOOTER", { class: true });
			var footer_nodes = children(footer);
			span = claim_element(footer_nodes, "SPAN", {});
			var span_nodes = children(span);
			t2 = claim_text(span_nodes, date);
			t3 = claim_text(span_nodes, " · ");
			t4 = claim_text(span_nodes, readTime);
			t5 = claim_text(span_nodes, " · ");
			t6 = claim_text(span_nodes, author);
			span_nodes.forEach(detach);
			footer_nodes.forEach(detach);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(header, "class", "entry-header");
			attr(footer, "class", "byLine svelte-qyda2w");
			attr(div, "class", "post-entry svelte-qyda2w");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, header);
			append(header, h4);
			append(h4, t0);
			append(div, t1);
			append(div, footer);
			append(footer, span);
			append(span, t2);
			append(span, t3);
			append(span, t4);
			append(span, t5);
			append(span, t6);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { items } = $$props;

	$$self.$$set = $$props => {
		if ("items" in $$props) $$invalidate(0, items = $$props.items);
	};

	return [items];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { items: 0 });
	}
}

export default Component;