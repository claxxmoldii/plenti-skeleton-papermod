/* generated by Svelte v3.32.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	space,
	text
} from '/spa/web_modules/svelte/internal/index.mjs';

function create_fragment(ctx) {
	let article;
	let header;
	let h2;
	let t0;
	let t1;
	let section;
	let p;
	let t2;
	let t3;
	let footer;
	let span;
	let t4;
	let t5;
	let a;

	return {
		c() {
			article = element("article");
			header = element("header");
			h2 = element("h2");
			t0 = text("Installation | Update");
			t1 = space();
			section = element("section");
			p = element("p");
			t2 = text("Read Install and Update instructions here...");
			t3 = space();
			footer = element("footer");
			span = element("span");
			t4 = text("January 20, 2021 · 4 min · Aditya Telange");
			t5 = space();
			a = element("a");
			this.h();
		},
		l(nodes) {
			article = claim_element(nodes, "ARTICLE", { class: true });
			var article_nodes = children(article);
			header = claim_element(article_nodes, "HEADER", { class: true });
			var header_nodes = children(header);
			h2 = claim_element(header_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, "Installation | Update");
			h2_nodes.forEach(detach);
			header_nodes.forEach(detach);
			t1 = claim_space(article_nodes);
			section = claim_element(article_nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			p = claim_element(section_nodes, "P", { class: true });
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, "Read Install and Update instructions here...");
			p_nodes.forEach(detach);
			section_nodes.forEach(detach);
			t3 = claim_space(article_nodes);
			footer = claim_element(article_nodes, "FOOTER", { class: true });
			var footer_nodes = children(footer);
			span = claim_element(footer_nodes, "SPAN", {});
			var span_nodes = children(span);
			t4 = claim_text(span_nodes, "January 20, 2021 · 4 min · Aditya Telange");
			span_nodes.forEach(detach);
			footer_nodes.forEach(detach);
			t5 = claim_space(article_nodes);

			a = claim_element(article_nodes, "A", {
				class: true,
				"aria-label": true,
				href: true
			});

			children(a).forEach(detach);
			article_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(h2, "class", "svelte-qyda2w");
			attr(header, "class", "entry-header");
			attr(p, "class", "svelte-qyda2w");
			attr(section, "class", "entry-content");
			attr(footer, "class", "byLine svelte-qyda2w");
			attr(a, "class", "entry-link");
			attr(a, "aria-label", "post link to Installation | Update");
			attr(a, "href", "https://adityatelange.github.io/hugo-PaperMod/posts/papermod/papermod-installation/");
			attr(article, "class", "post-entry svelte-qyda2w");
		},
		m(target, anchor) {
			insert(target, article, anchor);
			append(article, header);
			append(header, h2);
			append(h2, t0);
			append(article, t1);
			append(article, section);
			append(section, p);
			append(p, t2);
			append(article, t3);
			append(article, footer);
			append(footer, span);
			append(span, t4);
			append(article, t5);
			append(article, a);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(article);
		}
	};
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, create_fragment, safe_not_equal, {});
	}
}

export default Component;