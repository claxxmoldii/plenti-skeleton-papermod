/* generated by Svelte v3.32.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from '/spa/web_modules/svelte/internal/index.mjs';

function create_fragment(ctx) {
	let section;
	let header;
	let h1;
	let t0;
	let t1;
	let p;
	let t2;
	let t3;
	let ul;
	let li0;
	let t4;
	let t5;
	let li1;
	let t6;
	let t7;
	let li2;
	let t8;
	let t9;
	let li3;
	let t10;

	return {
		c() {
			section = element("section");
			header = element("header");
			h1 = element("h1");
			t0 = text(/*title*/ ctx[0]);
			t1 = space();
			p = element("p");
			t2 = text(/*description*/ ctx[1]);
			t3 = space();
			ul = element("ul");
			li0 = element("li");
			t4 = text("plenti");
			t5 = space();
			li1 = element("li");
			t6 = text("skeleton css");
			t7 = space();
			li2 = element("li");
			t8 = text("google font/raleway");
			t9 = space();
			li3 = element("li");
			t10 = text("papermod/papermod creator");
			this.h();
		},
		l(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			header = claim_element(section_nodes, "HEADER", { class: true });
			var header_nodes = children(header);
			h1 = claim_element(header_nodes, "H1", {});
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, /*title*/ ctx[0]);
			h1_nodes.forEach(detach);
			t1 = claim_space(header_nodes);
			p = claim_element(header_nodes, "P", {});
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, /*description*/ ctx[1]);
			p_nodes.forEach(detach);
			header_nodes.forEach(detach);
			t3 = claim_space(section_nodes);
			ul = claim_element(section_nodes, "UL", { class: true });
			var ul_nodes = children(ul);
			li0 = claim_element(ul_nodes, "LI", { class: true });
			var li0_nodes = children(li0);
			t4 = claim_text(li0_nodes, "plenti");
			li0_nodes.forEach(detach);
			t5 = claim_space(ul_nodes);
			li1 = claim_element(ul_nodes, "LI", { class: true });
			var li1_nodes = children(li1);
			t6 = claim_text(li1_nodes, "skeleton css");
			li1_nodes.forEach(detach);
			t7 = claim_space(ul_nodes);
			li2 = claim_element(ul_nodes, "LI", { class: true });
			var li2_nodes = children(li2);
			t8 = claim_text(li2_nodes, "google font/raleway");
			li2_nodes.forEach(detach);
			t9 = claim_space(ul_nodes);
			li3 = claim_element(ul_nodes, "LI", { class: true });
			var li3_nodes = children(li3);
			t10 = claim_text(li3_nodes, "papermod/papermod creator");
			li3_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			section_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(header, "class", "svelte-flif8p");
			attr(li0, "class", "svelte-flif8p");
			attr(li1, "class", "svelte-flif8p");
			attr(li2, "class", "svelte-flif8p");
			attr(li3, "class", "svelte-flif8p");
			attr(ul, "class", "svelte-flif8p");
			attr(section, "class", "attributions container isGrid svelte-flif8p");
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, header);
			append(header, h1);
			append(h1, t0);
			append(header, t1);
			append(header, p);
			append(p, t2);
			append(section, t3);
			append(section, ul);
			append(ul, li0);
			append(li0, t4);
			append(ul, t5);
			append(ul, li1);
			append(li1, t6);
			append(ul, t7);
			append(ul, li2);
			append(li2, t8);
			append(ul, t9);
			append(ul, li3);
			append(li3, t10);
		},
		p(ctx, [dirty]) {
			if (dirty & /*title*/ 1) set_data(t0, /*title*/ ctx[0]);
			if (dirty & /*description*/ 2) set_data(t2, /*description*/ ctx[1]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(section);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { title } = $$props, { description } = $$props, { created } = $$props;

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("description" in $$props) $$invalidate(1, description = $$props.description);
		if ("created" in $$props) $$invalidate(2, created = $$props.created);
	};

	return [title, description, created];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { title: 0, description: 1, created: 2 });
	}
}

export default Component;